// <auto-generated />
using System;
using COMPANY.Presistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace COMPANY.Presistence.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20201014154829_AddClientRelationEntity")]
    partial class AddClientRelationEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("COMPANY.Domain.Entities.Agence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AdresseFacturation")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AdresseLivraison")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AgenceLoginId")
                        .HasMaxLength(256);

                    b.Property<string>("Capital")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateDebutActivite");

                    b.Property<DateTime?>("DateFinActivite");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FormeJuridique")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memo")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroTvaINTRA")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("RaisonSociale")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("RegulationModeId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Siret")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceLoginId")
                        .IsUnique();

                    b.HasIndex("RegulationModeId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Agence");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("IsModify");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new { Id = "BankAccount::1", CodeComptable = "44553", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = false, Name = "Caisse", Type = 1 }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.CategoryProduct", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AccountingCode")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Address")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("ClientLoginId")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<string>("CommercialId")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateReceptionLead");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<int>("Genre");

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsMaisonDePlusDeDeuxAns");

                    b.Property<bool>("IsSousTraitant");

                    b.Property<string>("LabelPrimeCEE")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("LogementTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("Memo")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NombrePersonne")
                        .HasMaxLength(256);

                    b.Property<string>("NoteDevis")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroAH")
                        .HasMaxLength(256);

                    b.Property<string>("ParcelleCadastrale")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<int?>("Precarite");

                    b.Property<string>("PrimeCEEId")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("RegulationModeId")
                        .HasMaxLength(256);

                    b.Property<string>("RevenueFiscaleReference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Siret")
                        .HasMaxLength(256);

                    b.Property<string>("SourceLead")
                        .HasMaxLength(256);

                    b.Property<double?>("SurfaceTraiter");

                    b.Property<int>("Type");

                    b.Property<string>("TypeChauffageId")
                        .HasMaxLength(256);

                    b.Property<int?>("TypeTravaux");

                    b.Property<string>("WebSite")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientLoginId")
                        .IsUnique();

                    b.HasIndex("CommercialId");

                    b.HasIndex("LogementTypeId");

                    b.HasIndex("PrimeCEEId");

                    b.HasIndex("RegulationModeId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("TypeChauffageId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.ConfigMessagerie", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Password")
                        .HasMaxLength(256);

                    b.Property<int>("Port");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Server")
                        .HasMaxLength(256);

                    b.Property<bool>("Ssl");

                    b.Property<string>("Username")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("ConfigMessageries");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<int>("Code");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NomEnGb")
                        .HasMaxLength(256);

                    b.Property<string>("NomFrFr")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Departement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("CountryId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("DepartementCode")
                        .HasMaxLength(256);

                    b.Property<string>("DepartementNom")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Devis", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Articles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateSignature");

                    b.Property<DateTime>("DateVisit");

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<string>("Emails")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NameClientSignature")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Photos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("RaisonPerdue")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Signe")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SiteIntervention")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalHT");

                    b.Property<decimal>("TotalPaid");

                    b.Property<decimal>("TotalReduction");

                    b.Property<decimal>("TotalTTC");

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DossierId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("Devis");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DocumentParameters", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Avoir")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Devis")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Facture")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("TVA")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("DocumentParameters");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Avoir", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Articles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<bool>("Comptabilise");

                    b.Property<int?>("Counter");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateEcheance");

                    b.Property<string>("Emails")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("FactureId")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Objet")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("ReglementCondition")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<decimal>("Remise");

                    b.Property<int>("RemiseType");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalHT");

                    b.Property<decimal>("TotalTTC");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FactureId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Avoirs");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Facture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Articles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<bool>("Comptabilise");

                    b.Property<int?>("Counter");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateEcheance");

                    b.Property<string>("Emails")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroAH")
                        .HasMaxLength(256);

                    b.Property<string>("Objet")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("ReglementCondition")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<decimal>("Remise");

                    b.Property<int>("RemiseType");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalHT");

                    b.Property<decimal>("TotalPaid");

                    b.Property<decimal>("TotalReduction");

                    b.Property<decimal>("TotalTTC");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.FactureDevis", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("DevisId")
                        .HasMaxLength(256);

                    b.Property<string>("FactureId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("Montant");

                    b.Property<int>("MontantType");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("DevisId");

                    b.HasIndex("FactureId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("FactureDevis");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Dossier", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("AntsrouteOrderId")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<string>("CommercialId")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateCreation");

                    b.Property<DateTime?>("DateExpiration");

                    b.Property<DateTime>("DatePose");

                    b.Property<DateTime?>("DateRDV");

                    b.Property<DateTime?>("DateReceptionLead");

                    b.Property<string>("FirstPhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsMaisonDePlusDeDeuxAns");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("LogementTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("Memo")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NombrePersonne")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroAH")
                        .HasMaxLength(256);

                    b.Property<string>("ParcelleCadastrale")
                        .HasMaxLength(256);

                    b.Property<int?>("Precarite");

                    b.Property<string>("PremierRdvId")
                        .HasMaxLength(256);

                    b.Property<string>("PrimeCEEId")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("RevenueFiscaleReference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SecondPhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("SiteIntervention")
                        .HasMaxLength(256);

                    b.Property<string>("SourceLead")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<double?>("SurfaceTraiter");

                    b.Property<string>("TypeChauffageId")
                        .HasMaxLength(256);

                    b.Property<int?>("TypeTravaux");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CommercialId");

                    b.HasIndex("LogementTypeId");

                    b.HasIndex("PremierRdvId");

                    b.HasIndex("PrimeCEEId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("TypeChauffageId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierInstallation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateInstallation");

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("TechnicienId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("TechnicienId");

                    b.ToTable("DossierInstallations");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierPV", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Article")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<string>("FicheControleId")
                        .HasMaxLength(256);

                    b.Property<bool>("IsSatisfied");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NameClientSignature")
                        .HasMaxLength(256);

                    b.Property<string>("Photos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ReasonNoSatisfaction")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SignatureClient")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SignatureTechnicien")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("FicheControleId")
                        .IsUnique();

                    b.HasIndex("SearchTerms");

                    b.ToTable("DossierPVs");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.EchangeCommercial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Address")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("CategorieId")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("CreateurId")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateEvent");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<TimeSpan?>("Duree");

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<int?>("Priorite");

                    b.Property<string>("RdvTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("ResponsableId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SourceRDVId")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<string>("TacheTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("Titre")
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.Property<string>("TypeAppelId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateurId");

                    b.HasIndex("DossierId");

                    b.HasIndex("RdvTypeId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("SourceRDVId");

                    b.HasIndex("TacheTypeId");

                    b.HasIndex("TypeAppelId");

                    b.ToTable("EchangeCommercials");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.FicheControle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("ConstatCombles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ConstatMurs")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ConstatPlanchers")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ControllerId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateControle");

                    b.Property<int>("EvaluationAccompagnement");

                    b.Property<int>("EvaluationContactAvecTechniciensApplicateurs");

                    b.Property<int>("EvaluationPropreteChantier");

                    b.Property<int>("EvaluationTravauxRealises");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NameClientSignature")
                        .HasMaxLength(256);

                    b.Property<string>("NumberOperation")
                        .HasMaxLength(256);

                    b.Property<string>("Photos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<int>("PrestationType");

                    b.Property<string>("Remarques")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SignatureClient")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SignatureController")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("FicheControles");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Fournisseur", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Address")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<string>("Contact")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("RaisonSociale")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Siret")
                        .HasMaxLength(256);

                    b.Property<string>("WebSite")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Generals.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<int>("DocType");

                    b.Property<string>("IdentityDocument")
                        .HasMaxLength(256);

                    b.Property<bool>("IsSeen");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Generals.Sms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<string>("ExternalId")
                        .HasMaxLength(256);

                    b.Property<bool>("IsBloquer");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Message")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroTelephone")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SmsEnvoyeId")
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DossierId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("SmsEnvoyeId");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Module", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Modules");

                    b.HasData(
                        new { Id = "Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Home" },
                        new { Id = "Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Clients" },
                        new { Id = "Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Fournisseurs" },
                        new { Id = "Agences", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Agences" },
                        new { Id = "Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Produits" },
                        new { Id = "Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Parameters" },
                        new { Id = "Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Users" },
                        new { Id = "Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Dossiers" },
                        new { Id = "AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Agenda Commercial" },
                        new { Id = "Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Devis" },
                        new { Id = "Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Facture" },
                        new { Id = "Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Avoir" },
                        new { Id = "Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Paiement" },
                        new { Id = "Accounting", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Accounting" },
                        new { Id = "CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Category Product" },
                        new { Id = "ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Modes Reglement" },
                        new { Id = "BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Bank Account" },
                        new { Id = "AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Agenda Parametrage" },
                        new { Id = "ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Modele Sms" },
                        new { Id = "TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Type Chauffage" },
                        new { Id = "TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Type Logement" },
                        new { Id = "DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Dashboard Commercial" },
                        new { Id = "DashboardProduction", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Dashboard Production" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Numerotation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<int>("Counter");

                    b.Property<int?>("CounterLength");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<int>("DateFormat");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Root")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Numerotations");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.AgendaEvenement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("AgendaEvenements");

                    b.HasData(
                        new { Id = "AgendaEvenement::1", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Prospection", Type = 0 },
                        new { Id = "AgendaEvenement::2", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Vérification", Type = 0 },
                        new { Id = "AgendaEvenement::3", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Planification", Type = 0 },
                        new { Id = "AgendaEvenement::4", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Tâche", Type = 0 },
                        new { Id = "AgendaEvenement::5", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Visite de contrôle", Type = 1 },
                        new { Id = "AgendaEvenement::6", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Pose", Type = 1 },
                        new { Id = "AgendaEvenement::7", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Visite technique", Type = 1 },
                        new { Id = "AgendaEvenement::8", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Commercial", Type = 3 },
                        new { Id = "AgendaEvenement::9", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Administratif", Type = 3 },
                        new { Id = "AgendaEvenement::10", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Technique", Type = 3 },
                        new { Id = "AgendaEvenement::11", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Appel", Type = 2 },
                        new { Id = "AgendaEvenement::12", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "rdv perso", Type = 4 },
                        new { Id = "AgendaEvenement::13", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "rdv company", Type = 4 }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.CategoryDocuments", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("SearchTerms");

                    b.HasKey("Id");

                    b.ToTable("CategoryDocuments");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.LogementType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("LogementTypes");

                    b.HasData(
                        new { Id = "LogementType::1", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Appartement" },
                        new { Id = "LogementType::2", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Maison" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.ModeleSms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("SearchTerms");

                    b.Property<string>("Text")
                        .HasColumnType("LONGTEXT");

                    b.HasKey("Id");

                    b.ToTable("ModeleSms");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.TypeChauffage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("TypeChauffage");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PeriodeComptable", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateCloture");

                    b.Property<DateTime>("DateDebut");

                    b.Property<bool>("IsClose");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<int>("Period");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("PeriodeComptables");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<int>("Access");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Permissions");

                    b.HasData(
                        new { Id = "Permission::Admin.Read", Access = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Read", RoleId = 1 },
                        new { Id = "Permission::Admin.Update", Access = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Update", RoleId = 1 },
                        new { Id = "Permission::Admin.Create", Access = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Create", RoleId = 1 },
                        new { Id = "Permission::Admin.Delete", Access = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Delete", RoleId = 1 },
                        new { Id = "Permission::Admin.ManipulationLogin", Access = 5, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Manipulation login", RoleId = 1 },
                        new { Id = "Permission::AdminAgence.Read", Access = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Read", RoleId = 7 },
                        new { Id = "Permission::AdminAgence.Update", Access = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Update", RoleId = 7 },
                        new { Id = "Permission::AdminAgence.Create", Access = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Create", RoleId = 7 },
                        new { Id = "Permission::AdminAgence.Delete", Access = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Delete", RoleId = 7 },
                        new { Id = "Permission::AdminAgence.ManipulationLogin", Access = 5, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Manipulation login", RoleId = 7 },
                        new { Id = "Permission::Controleur.Read", Access = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Read", RoleId = 2 },
                        new { Id = "Permission::Controleur.Update", Access = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Update", RoleId = 2 },
                        new { Id = "Permission::Controleur.Create", Access = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Create", RoleId = 2 },
                        new { Id = "Permission::Controleur.Delete", Access = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Delete", RoleId = 2 },
                        new { Id = "Permission::Directeur.Read", Access = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Read", RoleId = 3 },
                        new { Id = "Permission::Directeur.Update", Access = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Update", RoleId = 3 },
                        new { Id = "Permission::Directeur.Create", Access = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Create", RoleId = 3 },
                        new { Id = "Permission::Directeur.Delete", Access = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Delete", RoleId = 3 },
                        new { Id = "Permission::Commercial.Read", Access = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Read", RoleId = 6 },
                        new { Id = "Permission::Commercial.Update", Access = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Update", RoleId = 6 },
                        new { Id = "Permission::Commercial.Create", Access = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Create", RoleId = 6 },
                        new { Id = "Permission::Commercial.Delete", Access = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Delete", RoleId = 6 },
                        new { Id = "Permission::Technicien.Read", Access = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Read", RoleId = 4 },
                        new { Id = "Permission::Technicien.Update", Access = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Update", RoleId = 4 },
                        new { Id = "Permission::Technicien.Create", Access = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Create", RoleId = 4 },
                        new { Id = "Permission::Technicien.Delete", Access = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Delete", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PrixProduitParAgence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("PrixHT");

                    b.Property<string>("ProduitId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<double>("TVA");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("PrixProduitParAgences");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Produit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("CategoryId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Designation")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("FournisseurId")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Labels")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<decimal?>("PrixAchat");

                    b.Property<decimal>("PrixHT");

                    b.Property<string>("PrixParTranche")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<double>("TVA");

                    b.Property<string>("Unite")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.RegulationMode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("IsModify");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("RegulationModes");

                    b.HasData(
                        new { Id = "RegulationMode::1", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Carte bancaire" },
                        new { Id = "RegulationMode::2", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Chèque" },
                        new { Id = "RegulationMode::3", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Espèces" },
                        new { Id = "RegulationMode::4", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Paypal" },
                        new { Id = "RegulationMode::5", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Prélevèment" },
                        new { Id = "RegulationMode::6", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Virement" },
                        new { Id = "RegulationMode::7", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = false, Name = "Avoir" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.ClientRelation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Type")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("ClientRelations");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.GoogleCalendarEchangeCommercial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("CalendarId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EchangeCommercialId")
                        .HasMaxLength(256);

                    b.Property<string>("ExternalEventId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EchangeCommercialId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("GoogleCalendarEchangeCommercials");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.PermissionModule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("ModuleId")
                        .HasMaxLength(256);

                    b.Property<string>("PermissionId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("PermissionModules");

                    b.HasData(
                        new { Id = "Admin.Read.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Agences", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Agences", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.Accounting", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Accounting", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", PermissionId = "Permission::Admin.Read" },
                        new { Id = "Admin.Read.DashboardProduction", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardProduction", PermissionId = "Permission::Admin.Read" },
                        new { Id = "AdminAgence.Read.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Accounting", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Accounting", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "AdminAgence.Read.DashboardProduction", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardProduction", PermissionId = "Permission::AdminAgence.Read" },
                        new { Id = "Directeur.Read.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Directeur.Read.DashboardProduction", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardProduction", PermissionId = "Permission::Directeur.Read" },
                        new { Id = "Commercial.Read.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Commercial.Read.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", PermissionId = "Permission::Commercial.Read" },
                        new { Id = "Controleur.Read.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Controleur.Read.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", PermissionId = "Permission::Controleur.Read" },
                        new { Id = "Technicien.Read.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Technicien.Read.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Technicien.Read" },
                        new { Id = "Admin.Create.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Agences", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Agences", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Admin.Create" },
                        new { Id = "Admin.Create.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Admin.Create" },
                        new { Id = "AdminAgence.Create.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "AdminAgence.Create.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::AdminAgence.Create" },
                        new { Id = "Directeur.Create.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Directeur.Create.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Directeur.Create" },
                        new { Id = "Commercial.Create.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Commercial.Create" },
                        new { Id = "Commercial.Create.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Commercial.Create" },
                        new { Id = "Commercial.Create.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Commercial.Create" },
                        new { Id = "Commercial.Create.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Commercial.Create" },
                        new { Id = "Commercial.Create.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Commercial.Create" },
                        new { Id = "Commercial.Create.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Commercial.Create" },
                        new { Id = "Controleur.Create.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Controleur.Create" },
                        new { Id = "Controleur.Create.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Controleur.Create" },
                        new { Id = "Controleur.Create.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Controleur.Create" },
                        new { Id = "Controleur.Create.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Controleur.Create" },
                        new { Id = "Controleur.Create.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Controleur.Create" },
                        new { Id = "Controleur.Create.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Controleur.Create" },
                        new { Id = "Technicien.Create.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Technicien.Create" },
                        new { Id = "Technicien.Create.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Technicien.Create" },
                        new { Id = "Technicien.Create.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Technicien.Create" },
                        new { Id = "Technicien.Create.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Technicien.Create" },
                        new { Id = "Admin.Delete.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Agences", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Agences", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "Admin.Delete.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Admin.Delete" },
                        new { Id = "AdminAgence.Delete.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "AdminAgence.Delete.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::AdminAgence.Delete" },
                        new { Id = "Directeur.Delete.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Directeur.Delete.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Directeur.Delete" },
                        new { Id = "Commercial.Delete.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Commercial.Delete" },
                        new { Id = "Commercial.Delete.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Commercial.Delete" },
                        new { Id = "Commercial.Delete.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Commercial.Delete" },
                        new { Id = "Commercial.Delete.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Commercial.Delete" },
                        new { Id = "Commercial.Delete.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Commercial.Delete" },
                        new { Id = "Commercial.Delete.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Commercial.Delete" },
                        new { Id = "Commercial.Delete.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Commercial.Delete" },
                        new { Id = "Controleur.Delete.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Controleur.Delete" },
                        new { Id = "Controleur.Delete.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Controleur.Delete" },
                        new { Id = "Controleur.Delete.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Controleur.Delete" },
                        new { Id = "Controleur.Delete.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Controleur.Delete" },
                        new { Id = "Controleur.Delete.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Controleur.Delete" },
                        new { Id = "Controleur.Delete.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Controleur.Delete" },
                        new { Id = "Controleur.Delete.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Controleur.Delete" },
                        new { Id = "Technicien.Delete.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Technicien.Delete" },
                        new { Id = "Technicien.Delete.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Technicien.Delete" },
                        new { Id = "Technicien.Delete.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Technicien.Delete" },
                        new { Id = "Technicien.Delete.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Technicien.Delete" },
                        new { Id = "Technicien.Delete.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Technicien.Delete" },
                        new { Id = "Admin.Update.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Agences", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Agences", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", PermissionId = "Permission::Admin.Update" },
                        new { Id = "Admin.Update.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", PermissionId = "Permission::Admin.Update" },
                        new { Id = "AdminAgence.Update.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "AdminAgence.Update.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::AdminAgence.Update" },
                        new { Id = "Directeur.Update.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Directeur.Update.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Directeur.Update" },
                        new { Id = "Commercial.Update.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Commercial.Update" },
                        new { Id = "Commercial.Update.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Commercial.Update" },
                        new { Id = "Commercial.Update.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Commercial.Update" },
                        new { Id = "Commercial.Update.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Commercial.Update" },
                        new { Id = "Commercial.Update.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Commercial.Update" },
                        new { Id = "Commercial.Update.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Commercial.Update" },
                        new { Id = "Commercial.Update.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Commercial.Update" },
                        new { Id = "Controleur.Update.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Controleur.Update" },
                        new { Id = "Controleur.Update.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Controleur.Update" },
                        new { Id = "Controleur.Update.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", PermissionId = "Permission::Controleur.Update" },
                        new { Id = "Controleur.Update.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Controleur.Update" },
                        new { Id = "Controleur.Update.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Controleur.Update" },
                        new { Id = "Controleur.Update.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Controleur.Update" },
                        new { Id = "Controleur.Update.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", PermissionId = "Permission::Controleur.Update" },
                        new { Id = "Technicien.Update.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", PermissionId = "Permission::Technicien.Update" },
                        new { Id = "Technicien.Update.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", PermissionId = "Permission::Technicien.Update" },
                        new { Id = "Technicien.Update.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", PermissionId = "Permission::Technicien.Update" },
                        new { Id = "Technicien.Update.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", PermissionId = "Permission::Technicien.Update" },
                        new { Id = "Technicien.Update.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", PermissionId = "Permission::Technicien.Update" },
                        new { Id = "Admin.ManipulationLogin.Agence", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Agences", PermissionId = "Permission::Admin.ManipulationLogin" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.RoleModule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("ModuleId")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("RolesModules");

                    b.HasData(
                        new { Id = "RoleModule::Admin.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", RoleId = 1 },
                        new { Id = "RoleModule::Admin.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", RoleId = 1 },
                        new { Id = "RoleModule::Admin.DashboardProduction", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardProduction", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Agences", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Agences", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", RoleId = 1 },
                        new { Id = "RoleModule::Admin.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", RoleId = 1 },
                        new { Id = "RoleModule::Admin.Accounting", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Accounting", RoleId = 1 },
                        new { Id = "RoleModule::Admin.CategoryProduct", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "CategoryProduct", RoleId = 1 },
                        new { Id = "RoleModule::Admin.ModesReglement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModesReglement", RoleId = 1 },
                        new { Id = "RoleModule::Admin.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", RoleId = 1 },
                        new { Id = "RoleModule::Admin.AgendaParametrage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaParametrage", RoleId = 1 },
                        new { Id = "RoleModule::Admin.ModeleSms", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "ModeleSms", RoleId = 1 },
                        new { Id = "RoleModule::Admin.TypeChauffage", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeChauffage", RoleId = 1 },
                        new { Id = "RoleModule::Admin.TypeLogement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "TypeLogement", RoleId = 1 },
                        new { Id = "RoleModule::AdminAgence.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.DashboardProduction", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardProduction", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Users", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Users", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Parameters", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Parameters", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.Accounting", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Accounting", RoleId = 7 },
                        new { Id = "RoleModule::AdminAgence.BankAccount", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "BankAccount", RoleId = 7 },
                        new { Id = "RoleModule::Directeur.Home", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Home", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.DashboardProduction", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardProduction", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Fournisseurs", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Fournisseurs", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Facture", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Facture", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Avoir", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Avoir", RoleId = 3 },
                        new { Id = "RoleModule::Directeur.Paiement", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Paiement", RoleId = 3 },
                        new { Id = "RoleModule::Commercial.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", RoleId = 6 },
                        new { Id = "RoleModule::Commercial.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", RoleId = 6 },
                        new { Id = "RoleModule::Commercial.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", RoleId = 6 },
                        new { Id = "RoleModule::Commercial.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", RoleId = 6 },
                        new { Id = "RoleModule::Commercial.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", RoleId = 6 },
                        new { Id = "RoleModule::Commercial.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", RoleId = 6 },
                        new { Id = "RoleModule::Controleur.DashboardCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "DashboardCommercial", RoleId = 2 },
                        new { Id = "RoleModule::Controleur.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", RoleId = 2 },
                        new { Id = "RoleModule::Controleur.Produits", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Produits", RoleId = 2 },
                        new { Id = "RoleModule::Controleur.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", RoleId = 2 },
                        new { Id = "RoleModule::Controleur.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", RoleId = 2 },
                        new { Id = "RoleModule::Controleur.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", RoleId = 2 },
                        new { Id = "RoleModule::Technicien.Clients", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Clients", RoleId = 4 },
                        new { Id = "RoleModule::Technicien.Dossiers", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Dossiers", RoleId = 4 },
                        new { Id = "RoleModule::Technicien.AgendaCommercial", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "AgendaCommercial", RoleId = 4 },
                        new { Id = "RoleModule::Technicien.Devis", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = "Devis", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SearchTerms");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "admin", SearchTerms = "admin" },
                        new { Id = 2, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "controleur", SearchTerms = "controleur" },
                        new { Id = 3, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "directeur", SearchTerms = "directeur" },
                        new { Id = 4, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "technicien", SearchTerms = "technicien" },
                        new { Id = 6, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "commercial", SearchTerms = "commercial" },
                        new { Id = 7, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "admin agence", SearchTerms = "agence admin" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.SpecialArticle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Designation")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("SpecialArticles");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Unite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Unites");

                    b.HasData(
                        new { Id = "Unite::1", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "€" },
                        new { Id = "Unite::2", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "kg" },
                        new { Id = "Unite::3", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "h" },
                        new { Id = "Unite::4", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "m2" },
                        new { Id = "Unite::5", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "m3" },
                        new { Id = "Unite::6", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "L" },
                        new { Id = "Unite::7", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "U" },
                        new { Id = "Unite::8", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "m" },
                        new { Id = "Unite::9", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "j" },
                        new { Id = "Unite::10", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "g" },
                        new { Id = "Unite::11", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "min" },
                        new { Id = "Unite::12", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "mL" },
                        new { Id = "Unite::13", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "lot" },
                        new { Id = "Unite::14", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "km" },
                        new { Id = "Unite::15", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "cm" },
                        new { Id = "Unite::16", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "cm2" },
                        new { Id = "Unite::17", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "cm3" },
                        new { Id = "Unite::18", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "t" },
                        new { Id = "Unite::19", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "mg" },
                        new { Id = "Unite::20", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "mm" },
                        new { Id = "Unite::21", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "BO" },
                        new { Id = "Unite::22", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "BOI" },
                        new { Id = "Unite::23", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "TUB" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<int>("AccessfailedCount");

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("GoogleCalendarId")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastConnection");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Passwordhash")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.FacturePaiement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FactureId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("Montant");

                    b.Property<string>("PaiementId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("FactureId");

                    b.HasIndex("PaiementId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("FacturePaiements");
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.Paiement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("AvoirId")
                        .HasMaxLength(256);

                    b.Property<string>("BankAccountId")
                        .HasMaxLength(256);

                    b.Property<bool>("Comptabilise");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DatePaiement");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("Montant");

                    b.Property<string>("PaiementId")
                        .HasMaxLength(256);

                    b.Property<string>("RegulationModeId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("AvoirId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("PaiementId");

                    b.HasIndex("RegulationModeId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Agence", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.User", "AgenceLogin")
                        .WithOne("AgenceLogin")
                        .HasForeignKey("COMPANY.Domain.Entities.Agence", "AgenceLoginId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.RegulationMode", "RegulationMode")
                        .WithMany()
                        .HasForeignKey("RegulationModeId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Client", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.User", "ClientLogin")
                        .WithOne()
                        .HasForeignKey("COMPANY.Domain.Entities.Client", "ClientLoginId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "Commercial")
                        .WithMany()
                        .HasForeignKey("CommercialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.LogementType", "LogementType")
                        .WithMany("Clients")
                        .HasForeignKey("LogementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "PrimeCEE")
                        .WithMany("Clients")
                        .HasForeignKey("PrimeCEEId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.RegulationMode", "RegulationMode")
                        .WithMany()
                        .HasForeignKey("RegulationModeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.TypeChauffage", "TypeChauffage")
                        .WithMany("Clients")
                        .HasForeignKey("TypeChauffageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.ConfigMessagerie", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Departement", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Country", "Country")
                        .WithMany("Departements")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Devis", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Devis")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Devis")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("Devis")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany("Devis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DocumentParameters", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Avoir", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Avoirs")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Avoirs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Documents.Facture", "Facture")
                        .WithMany("Avoirs")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Facture", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Factures")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Factures")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.FactureDevis", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Devis", "Devis")
                        .WithMany("Factures")
                        .HasForeignKey("DevisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Documents.Facture", "Facture")
                        .WithMany("Devis")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Dossier", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Dossiers")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.User", "Commercial")
                        .WithMany("Dossiers")
                        .HasForeignKey("CommercialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.LogementType", "LogementType")
                        .WithMany("Dossiers")
                        .HasForeignKey("LogementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.EchangeCommercial", "PremierRdv")
                        .WithMany("PremiersRdvsDossiers")
                        .HasForeignKey("PremierRdvId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Client", "PrimeCEE")
                        .WithMany("Dossiers")
                        .HasForeignKey("PrimeCEEId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.TypeChauffage", "TypeChauffage")
                        .WithMany("Dossiers")
                        .HasForeignKey("TypeChauffageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierInstallation", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("DossierInstallations")
                        .HasForeignKey("DossierId");

                    b.HasOne("COMPANY.Domain.Entities.User", "Technicien")
                        .WithMany()
                        .HasForeignKey("TechnicienId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierPV", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("PVs")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.FicheControle", "FicheControle")
                        .WithOne("DossierPV")
                        .HasForeignKey("COMPANY.Domain.Entities.DossierPV", "FicheControleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.EchangeCommercial", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.AgendaEvenement", "Categorie")
                        .WithMany("EchangeCommercialsCategorie")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "Createur")
                        .WithMany("EchangeCommercialsCreateurs")
                        .HasForeignKey("CreateurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.AgendaEvenement", "RdvType")
                        .WithMany("EchangeCommercialsRdvType")
                        .HasForeignKey("RdvTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.User", "Responsable")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.AgendaEvenement", "SourceRDV")
                        .WithMany("EchangeCommercialsSourceRDV")
                        .HasForeignKey("SourceRDVId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.AgendaEvenement", "TacheType")
                        .WithMany("EchangeCommercialsTacheType")
                        .HasForeignKey("TacheTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.AgendaEvenement", "TypeAppel")
                        .WithMany("EchangeCommercialsTypeAppel")
                        .HasForeignKey("TypeAppelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.FicheControle", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.User", "Controller")
                        .WithMany("FicheControles")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Fournisseur", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Generals.Notification", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Generals.Sms", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Sms")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("Sms")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Generals.Sms", "SmsEnvoye")
                        .WithMany("Reponses")
                        .HasForeignKey("SmsEnvoyeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Numerotation", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PeriodeComptable", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Permission", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PrixProduitParAgence", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("PrixProduitParAgences")
                        .HasForeignKey("AgenceId");

                    b.HasOne("COMPANY.Domain.Entities.Produit", "Produit")
                        .WithMany("PrixProduitParAgences")
                        .HasForeignKey("ProduitId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Produit", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Produits")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.CategoryProduct", "Category")
                        .WithMany("Produits")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Fournisseur", "Fournisseur")
                        .WithMany("Produits")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.ClientRelation", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Relations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.GoogleCalendarEchangeCommercial", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.EchangeCommercial", "EchangeCommercial")
                        .WithMany("GoogleCalendarEvents")
                        .HasForeignKey("EchangeCommercialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany("GoogleCalendarEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.PermissionModule", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Module", "Module")
                        .WithMany("PermissionModules")
                        .HasForeignKey("ModuleId");

                    b.HasOne("COMPANY.Domain.Entities.Permission", "Permission")
                        .WithMany("Modules")
                        .HasForeignKey("PermissionId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.RoleModule", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Module", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId");

                    b.HasOne("COMPANY.Domain.Entities.Role", "Role")
                        .WithMany("Modules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.SpecialArticle", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.User", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Users")
                        .HasForeignKey("AgenceId");

                    b.HasOne("COMPANY.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.FacturePaiement", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Documents.Facture", "Facture")
                        .WithMany("FacturePaiements")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Enums.Documents.Paiement", "Paiement")
                        .WithMany("FacturePaiements")
                        .HasForeignKey("PaiementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.Paiement", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Paiements")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Documents.Avoir", "Avoir")
                        .WithMany("Paiements")
                        .HasForeignKey("AvoirId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("Paiements")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Enums.Documents.Paiement")
                        .WithMany("Paiements")
                        .HasForeignKey("PaiementId");

                    b.HasOne("COMPANY.Domain.Entities.RegulationMode", "RegulationMode")
                        .WithMany("Paiements")
                        .HasForeignKey("RegulationModeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
