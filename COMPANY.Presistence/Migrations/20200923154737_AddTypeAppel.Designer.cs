// <auto-generated />
using System;
using COMPANY.Presistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace COMPANY.Presistence.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20200923154737_AddTypeAppel")]
    partial class AddTypeAppel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("COMPANY.Domain.Entities.Agence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AdresseFacturation")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AdresseLivraison")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AgenceLoginId")
                        .HasMaxLength(256);

                    b.Property<string>("Capital")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateDebutActivite");

                    b.Property<DateTime?>("DateFinActivite");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FormeJuridique")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memo")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroTvaINTRA")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("RaisonSociale")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("RegulationModeId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Siret")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceLoginId")
                        .IsUnique();

                    b.HasIndex("RegulationModeId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Agence");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("IsModify");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new { Id = "BankAccount::1", CodeComptable = "44553", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = false, Name = "Caisse", Type = 1 }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.CategoryProduct", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AccountingCode")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Address")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("ClientLoginId")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<string>("CommercialId")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateReceptionLead");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<int>("Genre");

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsMaisonDePlusDeDeuxAns");

                    b.Property<string>("LabelPrimeCEE")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("LogementTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("Memo")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NombrePersonne")
                        .HasMaxLength(256);

                    b.Property<string>("NoteDevis")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroAH")
                        .HasMaxLength(256);

                    b.Property<string>("ParcelleCadastrale")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<int?>("Precarite");

                    b.Property<string>("PrimeCEEId")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("RegulationModeId")
                        .HasMaxLength(256);

                    b.Property<string>("RevenueFiscaleReference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Siret")
                        .HasMaxLength(256);

                    b.Property<string>("SourceLead")
                        .HasMaxLength(256);

                    b.Property<string>("SurfaceTraiter")
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.Property<string>("TypeChauffageId")
                        .HasMaxLength(256);

                    b.Property<int?>("TypeTravaux");

                    b.Property<string>("WebSite")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientLoginId")
                        .IsUnique();

                    b.HasIndex("CommercialId");

                    b.HasIndex("LogementTypeId");

                    b.HasIndex("PrimeCEEId");

                    b.HasIndex("RegulationModeId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("TypeChauffageId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.ConfigMessagerie", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Password")
                        .HasMaxLength(256);

                    b.Property<int>("Port");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Server")
                        .HasMaxLength(256);

                    b.Property<bool>("Ssl");

                    b.Property<string>("Username")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("ConfigMessageries");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<int>("Code");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NomEnGb")
                        .HasMaxLength(256);

                    b.Property<string>("NomFrFr")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Departement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("CountryId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("DepartementCode")
                        .HasMaxLength(256);

                    b.Property<string>("DepartementNom")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Devis", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Articles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateSignature");

                    b.Property<DateTime>("DateVisit");

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<string>("Emails")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NameClientSignature")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Photos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("RaisonPerdue")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Signe")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SiteIntervention")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalHT");

                    b.Property<decimal>("TotalPaid");

                    b.Property<decimal>("TotalReduction");

                    b.Property<decimal>("TotalTTC");

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DossierId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("Devis");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DocumentParameters", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Avoir")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Devis")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Facture")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("TVA")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("DocumentParameters");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Avoir", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Articles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<bool>("Comptabilise");

                    b.Property<int?>("Counter");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateEcheance");

                    b.Property<string>("Emails")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("FactureId")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Objet")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("ReglementCondition")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<decimal>("Remise");

                    b.Property<int>("RemiseType");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalHT");

                    b.Property<decimal>("TotalTTC");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FactureId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Avoirs");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Facture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("Articles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<bool>("Comptabilise");

                    b.Property<int?>("Counter");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateEcheance");

                    b.Property<string>("Emails")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroAH")
                        .HasMaxLength(256);

                    b.Property<string>("Objet")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("ReglementCondition")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<decimal>("Remise");

                    b.Property<int>("RemiseType");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalHT");

                    b.Property<decimal>("TotalPaid");

                    b.Property<decimal>("TotalReduction");

                    b.Property<decimal>("TotalTTC");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.FactureDevis", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("DevisId")
                        .HasMaxLength(256);

                    b.Property<string>("FactureId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("Montant");

                    b.Property<int>("MontantType");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("DevisId");

                    b.HasIndex("FactureId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("FactureDevis");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Dossier", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<string>("CommercialId")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DatePose");

                    b.Property<DateTime?>("DateRDV");

                    b.Property<DateTime?>("DateReceptionLead");

                    b.Property<string>("FirstPhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsMaisonDePlusDeDeuxAns");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("LogementTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("Memo")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NombrePersonne")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasMaxLength(256);

                    b.Property<string>("NumeroAH")
                        .HasMaxLength(256);

                    b.Property<string>("ParcelleCadastrale")
                        .HasMaxLength(256);

                    b.Property<int?>("Precarite");

                    b.Property<string>("PremierRdvId")
                        .HasMaxLength(256);

                    b.Property<string>("PrimeCEEId")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("RevenueFiscaleReference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SecondPhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("SiteIntervention")
                        .HasMaxLength(256);

                    b.Property<string>("SourceLead")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<string>("SurfaceTraiter")
                        .HasMaxLength(256);

                    b.Property<string>("TypeChauffageId")
                        .HasMaxLength(256);

                    b.Property<int?>("TypeTravaux");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CommercialId");

                    b.HasIndex("LogementTypeId");

                    b.HasIndex("PremierRdvId");

                    b.HasIndex("PrimeCEEId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("TypeChauffageId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierInstallation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateInstallation");

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Status");

                    b.Property<string>("TechnicienId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("TechnicienId");

                    b.ToTable("DossierInstallations");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierPV", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Article")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<string>("FicheControleId")
                        .HasMaxLength(256);

                    b.Property<bool>("IsSatisfied");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NameClientSignature")
                        .HasMaxLength(256);

                    b.Property<string>("Photos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ReasonNoSatisfaction")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SignatureClient")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SignatureTechnicien")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("FicheControleId")
                        .IsUnique();

                    b.HasIndex("SearchTerms");

                    b.ToTable("DossierPVs");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.EchangeCommercial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Address")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("CategorieId")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<string>("Contacts")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateEvent");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("DossierId")
                        .HasMaxLength(256);

                    b.Property<TimeSpan?>("Duree");

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<int?>("Priorite");

                    b.Property<string>("RdvTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("ResponsableId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Status");

                    b.Property<string>("TacheTypeId")
                        .HasMaxLength(256);

                    b.Property<string>("Titre")
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.Property<string>("TypeAppelId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DossierId");

                    b.HasIndex("RdvTypeId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("TacheTypeId");

                    b.HasIndex("TypeAppelId");

                    b.ToTable("EchangeCommercials");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.FicheControle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("ConstatCombles")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ConstatMurs")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ConstatPlanchers")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ControllerId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DateControle");

                    b.Property<int>("EvaluationAccompagnement");

                    b.Property<int>("EvaluationContactAvecTechniciensApplicateurs");

                    b.Property<int>("EvaluationPropreteChantier");

                    b.Property<int>("EvaluationTravauxRealises");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("NameClientSignature")
                        .HasMaxLength(256);

                    b.Property<string>("NumberOperation")
                        .HasMaxLength(256);

                    b.Property<string>("Photos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<int>("PrestationType");

                    b.Property<string>("Remarques")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("SignatureClient")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("SignatureController")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("FicheControles");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Fournisseur", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Address")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("CodeComptable")
                        .HasMaxLength(256);

                    b.Property<string>("Contact")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<string>("RaisonSociale")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Siret")
                        .HasMaxLength(256);

                    b.Property<string>("WebSite")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Generals.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<int>("DocType");

                    b.Property<string>("IdentityDocument")
                        .HasMaxLength(256);

                    b.Property<bool>("IsSeen");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Modules");

                    b.HasData(
                        new { Id = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Home" },
                        new { Id = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Clients" },
                        new { Id = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Fournisseurs" },
                        new { Id = 6, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Produits" },
                        new { Id = 5, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Users" },
                        new { Id = 7, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Parameters" },
                        new { Id = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Agence" },
                        new { Id = 8, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Suivi Dossier" },
                        new { Id = 9, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Agenda Commercial" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Numerotation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<int>("Counter");

                    b.Property<int?>("CounterLength");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<int>("DateFormat");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Root")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Numerotations");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.CategorieEvenement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("CategorieEvenements");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.CategoryDocuments", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("SearchTerms");

                    b.HasKey("Id");

                    b.ToTable("CategoryDocuments");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.LogementType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("LogementTypes");

                    b.HasData(
                        new { Id = "LogementType::1", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Appartement" },
                        new { Id = "LogementType::2", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Maison" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.ModeleSms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("SearchTerms");

                    b.Property<string>("Text")
                        .HasColumnType("LONGTEXT");

                    b.HasKey("Id");

                    b.ToTable("ModeleSms");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.RdvType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("RdvTypes");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.TacheType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("TacheTypes");

                    b.HasData(
                        new { Id = "TacheType::1", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Tâche" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.TypeAppel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("TypeAppel");

                    b.HasData(
                        new { Id = "AppelType::1", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Name = "Appel" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Parameters.TypeChauffage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("TypeChauffage");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PeriodeComptable", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime?>("DateCloture");

                    b.Property<DateTime>("DateDebut");

                    b.Property<bool>("IsClose");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<int>("Period");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("PeriodeComptables");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PrixProduitParAgence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("PrixHT");

                    b.Property<string>("ProduitId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<double>("TVA");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("PrixProduitParAgences");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Produit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("CategoryId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Designation")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("FournisseurId")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Labels")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<decimal?>("PrixAchat");

                    b.Property<decimal>("PrixHT");

                    b.Property<string>("PrixParTranche")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Reference")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<double>("TVA");

                    b.Property<string>("Unite")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.RegulationMode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("IsModify");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("RegulationModes");

                    b.HasData(
                        new { Id = "RegulationMode::1", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Carte bancaire" },
                        new { Id = "RegulationMode::2", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Chèque" },
                        new { Id = "RegulationMode::3", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Espèces" },
                        new { Id = "RegulationMode::4", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Paypal" },
                        new { Id = "RegulationMode::5", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Prélevèment" },
                        new { Id = "RegulationMode::6", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = true, Name = "Virement" },
                        new { Id = "RegulationMode::7", CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), IsModify = false, Name = "Avoir" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.GoogleCalendarEchangeCommercial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("CalendarId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EchangeCommercialId")
                        .HasMaxLength(256);

                    b.Property<string>("ExternalEventId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EchangeCommercialId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserId");

                    b.ToTable("GoogleCalendarEchangeCommercials");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SearchTerms");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "admin", SearchTerms = "admin" },
                        new { Id = 2, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "controleur", SearchTerms = "controleur" },
                        new { Id = 3, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "directeurCommercial", SearchTerms = "directeur commercial" },
                        new { Id = 4, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "technicien", SearchTerms = "technicien" },
                        new { Id = 5, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "manager", SearchTerms = "manager" },
                        new { Id = 6, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "Commercial", SearchTerms = "commercial" },
                        new { Id = 7, CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), LastModifiedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "Admin Agence", SearchTerms = "agence admin" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.RoleModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<int>("ModuleId");

                    b.Property<int>("RoleId");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("RoleModules");

                    b.HasData(
                        new { Id = 1, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 1, RoleId = 1 },
                        new { Id = 2, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 1, RoleId = 4 },
                        new { Id = 3, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 1, RoleId = 5 },
                        new { Id = 4, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 1, RoleId = 3 },
                        new { Id = 5, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 1, RoleId = 6 },
                        new { Id = 6, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 1, RoleId = 7 },
                        new { Id = 7, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 2, RoleId = 1 },
                        new { Id = 8, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 2, RoleId = 4 },
                        new { Id = 9, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 2, RoleId = 5 },
                        new { Id = 10, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 2, RoleId = 7 },
                        new { Id = 11, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 3, RoleId = 1 },
                        new { Id = 12, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 3, RoleId = 4 },
                        new { Id = 13, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 3, RoleId = 5 },
                        new { Id = 14, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 3, RoleId = 7 },
                        new { Id = 15, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 6, RoleId = 1 },
                        new { Id = 16, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 6, RoleId = 4 },
                        new { Id = 17, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 6, RoleId = 5 },
                        new { Id = 18, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 6, RoleId = 7 },
                        new { Id = 19, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 5, RoleId = 1 },
                        new { Id = 20, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 5, RoleId = 4 },
                        new { Id = 21, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 5, RoleId = 5 },
                        new { Id = 22, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 5, RoleId = 7 },
                        new { Id = 23, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 4, RoleId = 1 },
                        new { Id = 24, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 4, RoleId = 4 },
                        new { Id = 25, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 7, RoleId = 1 },
                        new { Id = 26, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 7, RoleId = 4 },
                        new { Id = 27, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 7, RoleId = 5 },
                        new { Id = 28, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 7, RoleId = 7 },
                        new { Id = 29, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 8, RoleId = 1 },
                        new { Id = 30, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 8, RoleId = 4 },
                        new { Id = 31, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 8, RoleId = 5 },
                        new { Id = 32, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 8, RoleId = 7 },
                        new { Id = 33, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 9, RoleId = 1 },
                        new { Id = 34, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 9, RoleId = 4 },
                        new { Id = 35, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 9, RoleId = 5 },
                        new { Id = 36, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 9, RoleId = 7 },
                        new { Id = 37, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 9, RoleId = 6 },
                        new { Id = 38, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 9, RoleId = 2 },
                        new { Id = 39, CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModuleId = 9, RoleId = 3 }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.SpecialArticle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Designation")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("SpecialArticles");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Unite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Unites");

                    b.HasData(
                        new { Id = "Unite::1", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "€" },
                        new { Id = "Unite::2", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "kg" },
                        new { Id = "Unite::3", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "h" },
                        new { Id = "Unite::4", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "m2" },
                        new { Id = "Unite::5", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "m3" },
                        new { Id = "Unite::6", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "L" },
                        new { Id = "Unite::7", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "U" },
                        new { Id = "Unite::8", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "m" },
                        new { Id = "Unite::9", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "j" },
                        new { Id = "Unite::10", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "g" },
                        new { Id = "Unite::11", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "min" },
                        new { Id = "Unite::12", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "mL" },
                        new { Id = "Unite::13", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "lot" },
                        new { Id = "Unite::14", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "km" },
                        new { Id = "Unite::15", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "cm" },
                        new { Id = "Unite::16", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "cm2" },
                        new { Id = "Unite::17", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "cm3" },
                        new { Id = "Unite::18", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "t" },
                        new { Id = "Unite::19", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "mg" },
                        new { Id = "Unite::20", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "mm" },
                        new { Id = "Unite::21", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "BO" },
                        new { Id = "Unite::22", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "BOI" },
                        new { Id = "Unite::23", CreatedOn = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)), Name = "TUB" }
                    );
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<int>("AccessfailedCount");

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("GoogleCalendarId")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastConnection");

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Memos")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Passwordhash")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SearchTerms");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.FacturePaiement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FactureId")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("Montant");

                    b.Property<string>("PaiementId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("FactureId");

                    b.HasIndex("PaiementId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("FacturePaiements");
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.Paiement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("AgenceId")
                        .HasMaxLength(256);

                    b.Property<string>("AvoirId")
                        .HasMaxLength(256);

                    b.Property<string>("BankAccountId")
                        .HasMaxLength(256);

                    b.Property<bool>("Comptabilise");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTime>("DatePaiement");

                    b.Property<string>("Description")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Historique")
                        .HasColumnType("LONGTEXT")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("LastModifiedOn");

                    b.Property<decimal>("Montant");

                    b.Property<string>("PaiementId")
                        .HasMaxLength(256);

                    b.Property<string>("RegulationModeId")
                        .HasMaxLength(256);

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(750);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.HasIndex("AvoirId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("PaiementId");

                    b.HasIndex("RegulationModeId");

                    b.HasIndex("SearchTerms");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Agence", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.User", "AgenceLogin")
                        .WithOne("AgenceLogin")
                        .HasForeignKey("COMPANY.Domain.Entities.Agence", "AgenceLoginId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.RegulationMode", "RegulationMode")
                        .WithMany()
                        .HasForeignKey("RegulationModeId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Client", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.User", "ClientLogin")
                        .WithOne()
                        .HasForeignKey("COMPANY.Domain.Entities.Client", "ClientLoginId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "Commercial")
                        .WithMany()
                        .HasForeignKey("CommercialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.LogementType", "LogementType")
                        .WithMany("Clients")
                        .HasForeignKey("LogementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "PrimeCEE")
                        .WithMany("Clients")
                        .HasForeignKey("PrimeCEEId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.RegulationMode", "RegulationMode")
                        .WithMany()
                        .HasForeignKey("RegulationModeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.TypeChauffage", "TypeChauffage")
                        .WithMany("Clients")
                        .HasForeignKey("TypeChauffageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.ConfigMessagerie", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Departement", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Country", "Country")
                        .WithMany("Departements")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Devis", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Devis")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Devis")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("Devis")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany("Devis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DocumentParameters", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Avoir", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Avoirs")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Avoirs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Documents.Facture", "Facture")
                        .WithMany("Avoirs")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.Facture", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Factures")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("Factures")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Documents.FactureDevis", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Devis", "Devis")
                        .WithMany("Factures")
                        .HasForeignKey("DevisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Documents.Facture", "Facture")
                        .WithMany("Devis")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Dossier", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Dossiers")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.User", "Commercial")
                        .WithMany("Dossiers")
                        .HasForeignKey("CommercialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.LogementType", "LogementType")
                        .WithMany("Dossiers")
                        .HasForeignKey("LogementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.EchangeCommercial", "PremierRdv")
                        .WithMany("PremierRDVEvents")
                        .HasForeignKey("PremierRdvId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "PrimeCEE")
                        .WithMany("Dossiers")
                        .HasForeignKey("PrimeCEEId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.TypeChauffage", "TypeChauffage")
                        .WithMany("Dossiers")
                        .HasForeignKey("TypeChauffageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierInstallation", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("DossierInstallations")
                        .HasForeignKey("DossierId");

                    b.HasOne("COMPANY.Domain.Entities.User", "Technicien")
                        .WithMany()
                        .HasForeignKey("TechnicienId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.DossierPV", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("PVs")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.FicheControle", "FicheControle")
                        .WithOne("DossierPV")
                        .HasForeignKey("COMPANY.Domain.Entities.DossierPV", "FicheControleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.EchangeCommercial", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.CategorieEvenement", "Categorie")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Client", "Client")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Dossier", "Dossier")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.RdvType", "RdvType")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("RdvTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.User", "Responsable")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.TacheType", "TacheType")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("TacheTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Parameters.TypeAppel", "TypeAppel")
                        .WithMany("EchangeCommercials")
                        .HasForeignKey("TypeAppelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.FicheControle", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.User", "Controller")
                        .WithMany("FicheControles")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Generals.Notification", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Numerotation", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PeriodeComptable", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Permission", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.PrixProduitParAgence", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("PrixProduitParAgences")
                        .HasForeignKey("AgenceId");

                    b.HasOne("COMPANY.Domain.Entities.Produit", "Produit")
                        .WithMany("PrixProduitParAgences")
                        .HasForeignKey("ProduitId");
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Produit", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Produits")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.CategoryProduct", "Category")
                        .WithMany("Produits")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.Fournisseur", "Fournisseur")
                        .WithMany("Produits")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.Relations.GoogleCalendarEchangeCommercial", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.EchangeCommercial", "EchangeCommercial")
                        .WithMany("GoogleCalendarEvents")
                        .HasForeignKey("EchangeCommercialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.User", "User")
                        .WithMany("GoogleCalendarEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.RoleModule", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Module", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Entities.User", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Users")
                        .HasForeignKey("AgenceId");

                    b.HasOne("COMPANY.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.FacturePaiement", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Documents.Facture", "Facture")
                        .WithMany("FacturePaiements")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("COMPANY.Domain.Enums.Documents.Paiement", "Paiement")
                        .WithMany("FacturePaiements")
                        .HasForeignKey("PaiementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COMPANY.Domain.Enums.Documents.Paiement", b =>
                {
                    b.HasOne("COMPANY.Domain.Entities.Agence", "Agence")
                        .WithMany("Paiements")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Entities.Documents.Avoir", "Avoir")
                        .WithMany("Paiements")
                        .HasForeignKey("AvoirId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("COMPANY.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("Paiements")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("COMPANY.Domain.Enums.Documents.Paiement")
                        .WithMany("Paiements")
                        .HasForeignKey("PaiementId");

                    b.HasOne("COMPANY.Domain.Entities.RegulationMode", "RegulationMode")
                        .WithMany("Paiements")
                        .HasForeignKey("RegulationModeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
